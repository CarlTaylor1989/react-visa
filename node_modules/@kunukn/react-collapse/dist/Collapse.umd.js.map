{"version":3,"file":"Collapse.umd.js","sources":["../src/components/collapse/Collapse.jsx"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * All debug logs are removed on build\n */\n\nimport \"./collapse.css\";\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  useReducer\n} from \"react\";\nimport debugLog from \"./debugLog\";\n\n// using let instead of const,\n// experimenting with ES2015 bundle which gets a bit smaller when using let over const.\nlet COLLAPSED = \"collapsed\";\nlet COLLAPSING = \"collapsing\";\nlet EXPANDING = \"expanding\";\nlet EXPANDED = \"expanded\";\n\nlet defaultClassName = \"collapse-css-transition\";\nlet defaultElementType = \"div\";\nlet defaultCollapseHeight = \"0px\";\n\n/**\n *\n * @param {function} callback\n */\nfunction nextFrame(callback) {\n  requestAnimationFrame(function() {\n    //setTimeout(callback, 0); // can be jumpy if click-spamming\n    requestAnimationFrame(callback);\n  });\n}\n\nlet useInstance = object => useRef(object).current;\n\nfunction Collapse({\n  children,\n  transition,\n  style,\n  render,\n  elementType = defaultElementType,\n  isOpen,\n  collapseHeight = defaultCollapseHeight,\n  onInit,\n  onChange,\n  className = defaultClassName,\n  addState,\n  noAnim,\n  ...rest\n}) {\n  let getCollapsedVisibility = () => (collapseHeight === \"0px\" ? \"hidden\" : \"\");\n\n  const [_, forceUpdate] = useReducer(_ => _ + 1, 0);\n\n  let elementRef = useRef();\n  let [callbackTick, setCallbackTick] = useState(0);\n\n  // Avoiding setState to control when stuff are updated.\n  // Might not be needed.\n  let state = useInstance({\n    collapse: isOpen ? EXPANDED : COLLAPSED,\n    style: {\n      height: isOpen ? \"\" : collapseHeight,\n      visibility: isOpen ? \"\" : getCollapsedVisibility()\n    }\n  });\n\n  useEffect(() => {\n    // Invoke callback when data are updated, use Effect to sync state.\n    callbackTick && onCallback(onChange);\n  }, [callbackTick]);\n\n  /**\n   *\n   * @param {function} callback\n   */\n  let onCallback = (callback, params = {}) => {\n    if (callback) {\n      debugLog(\"onCallback \" + callback.name);\n      callback({ state: state.collapse, style: state.style, ...params });\n    }\n  };\n\n  function setCollapsed() {\n    if (!elementRef.current) return; // might be redundant\n\n    // Update state\n    state.collapse = COLLAPSED;\n\n    debugLog(\"setCollapsed\");\n\n    state.style = {\n      height: collapseHeight,\n      visibility: getCollapsedVisibility()\n    };\n    forceUpdate();\n\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function setCollapsing() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setCollapsed();\n    }\n\n    // Update state\n    state.collapse = COLLAPSING;\n\n    debugLog(\"setCollapsing\");\n\n    state.style = {\n      height: getElementHeight(),\n      visibility: \"\"\n    };\n    forceUpdate();\n\n    nextFrame(() => {\n      if (!elementRef.current) return;\n      if (state.collapse !== COLLAPSING) return;\n\n      state.style = {\n        height: collapseHeight,\n        visibility: \"\"\n      };\n      //forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanding() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setExpanded();\n    }\n\n    // Updatetate\n    state.collapse = EXPANDING;\n\n    debugLog(\"setExpanding\");\n\n    nextFrame(() => {\n      if (!elementRef.current) return; // might be redundant\n      if (state.collapse !== EXPANDING) return;\n\n      state.style = {\n        height: getElementHeight(),\n        visibility: \"\"\n      };\n      forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanded() {\n    if (!elementRef.current) return; // might be redundant\n\n    // Update state\n    state.collapse = EXPANDED;\n\n    debugLog(\"setExpanded\");\n\n    state.style = {\n      height: \"\",\n      visibility: \"\"\n    };\n    forceUpdate();\n\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function getElementHeight() {\n    // @ts-ignore\n    return `${elementRef.current.scrollHeight}px`;\n  }\n\n  function onTransitionEnd({ target, propertyName }) {\n    if (target === elementRef.current && propertyName === \"height\") {\n      let styleHeight = target.style.height;\n\n      debugLog(\"onTransitionEnd\", state.collapse, propertyName, styleHeight);\n\n      switch (state.collapse) {\n        case EXPANDING:\n          if (styleHeight === \"\" || styleHeight === collapseHeight)\n            // This is stale, a newer event has happened before this could execute\n            console.warn(\n              `onTransitionEnd height unexpected ${styleHeight}`,\n              \"ignore setExpanded\"\n            );\n          else setExpanded();\n          break;\n        case COLLAPSING:\n          if (styleHeight === \"\" || styleHeight !== collapseHeight)\n            // This is stale, a newer event has happened before this could execute\n            console.warn(\n              `onTransitionEnd height unexpected ${styleHeight}`,\n              \"ignore setCollapsed\"\n            );\n          else setCollapsed();\n          break;\n        default:\n          console.warn(\"Ignored in onTransitionEnd\", state.collapse);\n      }\n    }\n  }\n\n  // getDerivedStateFromProps\n  let didOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\n\n  if (!didOpen && isOpen) setExpanding();\n\n  if (didOpen && !isOpen) setCollapsing();\n  // END getDerivedStateFromProps\n\n  let computedStyle = {\n    overflow: \"hidden\",\n    transition,\n    ...style,\n    ...state.style\n  };\n  let ElementType = elementType;\n\n  let callbackRef = useCallback(\n    node => {\n      if (node) {\n        elementRef.current = node;\n        onCallback(onInit, { node });\n        debugLog(\"callback ref\");\n      }\n    },\n    [elementType]\n  );\n\n  let collapseClassName = addState\n    ? `${className} --c-${state.collapse}`\n    : className;\n\n  debugLog(\"Render\");\n\n  return (\n    <ElementType\n      ref={callbackRef}\n      style={computedStyle}\n      onTransitionEnd={onTransitionEnd}\n      className={collapseClassName}\n      {...rest}\n    >\n      {typeof children === \"function\"\n        ? children(state.collapse)\n        : typeof render === \"function\"\n        ? render(state.collapse)\n        : children}\n    </ElementType>\n  );\n}\n\nexport default Collapse;\n"],"names":["COLLAPSED","COLLAPSING","EXPANDING","EXPANDED","defaultClassName","defaultElementType","defaultCollapseHeight","nextFrame","callback","requestAnimationFrame","useInstance","object","useRef","current","children","transition","style","render","elementType","isOpen","collapseHeight","onInit","onChange","className","addState","noAnim","rest","getCollapsedVisibility","useReducer","_","forceUpdate","elementRef","useState","callbackTick","setCallbackTick","state","collapse","height","visibility","useEffect","onCallback","params","name","setCollapsed","setTimeout","Date","now","setExpanded","getElementHeight","scrollHeight","didOpen","setExpanding","setCollapsing","computedStyle","overflow","ElementType","callbackRef","useCallback","node","collapseClassName","React","ref","onTransitionEnd","target","propertyName","styleHeight"],"mappings":"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"}