// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the SolutionFeedback component with the correct feedback and an OK button 1`] = `
<Modal
  animationDuration={500}
  blockScroll={true}
  center={true}
  classNames={
    Object {
      "modal": "solutionFeedback correct",
      "overlay": "solutionFeedbackOverlay",
    }
  }
  classes={
    Object {
      "closeButton": "styles_closeButton__20ID4",
      "closeIcon": "styles_closeIcon__1QwbI",
      "modal": "styles_modal__gNwvD",
      "modalCenter": "styles_modalCenter__L9F2w",
      "overlay": "styles_overlay__CLSq-",
      "transitionEnter": "styles_transitionEnter__3j_-a",
      "transitionEnterActive": "styles_transitionEnterActive___eQs7",
      "transitionExit": "styles_transitionExit__1KmEf",
      "transitionExitActive": "styles_transitionExitActive__1nQXw",
    }
  }
  closeIconSize={28}
  closeIconSvgPath={
    <path
      d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
    />
  }
  closeOnEsc={false}
  closeOnOverlayClick={false}
  container={null}
  focusTrapOptions={Object {}}
  focusTrapped={true}
  onClose={[MockFunction]}
  onEntered={[MockFunction]}
  onModalExited={[MockFunction]}
  open={true}
  role="dialog"
  showCloseIcon={false}
  styles={Object {}}
>
  <div
    className="animatedBackground"
  />
  <div
    className="woman"
  />
  <div
    className="popupWrapper"
  >
    <div
      className="leftColumn"
    >
      <div
        className="popupTitle"
      >
        <Translate
          tag="span"
          value="clientprops.correctSolutionFeedbackTitle"
        />
      </div>
      <div
        className="scrollingArea"
      >
        <Scrollbar
          contentProps={Object {}}
          fallbackScrollbarWidth={20}
          maximalThumbYSize={83}
          minimalThumbSize={30}
          minimalThumbYSize={83}
          momentum={true}
          noDefaultStyles={true}
          scrollDetectionThreshold={100}
          scrollerProps={Object {}}
          thumbXProps={Object {}}
          thumbYProps={Object {}}
          trackClickBehavior="jump"
          trackXProps={Object {}}
          trackYProps={Object {}}
          wrapperProps={Object {}}
        >
          <div
            className="scrollWrapper"
          >
            <Translate
              className="feedbackText"
              dangerousHTML={true}
              tag="span"
              value="clientprops.clients.client1.correctSolutionFeedback"
            />
          </div>
        </Scrollbar>
      </div>
    </div>
    <div
      className="rightColumn"
    >
      <Translate
        attempts={1}
        className="solutionAttempts"
        dangerousHTML={true}
        tag="span"
        value="clientprops.solutionAttempts"
      />
      <div
        className="pointsWrapper"
      >
        <FeedbackPoints
          points={100000}
          showTotalText={false}
        />
      </div>
      <Translate
        className="nextSteps"
        tag="span"
        value="clientprops.correctSolutionFeedbackNextSteps"
      />
      <div
        className="feedbackWrapper"
      >
        <NavLink
          className="feedbackBtn"
          onClick={[MockFunction]}
          to="/game/clientproposals/selector"
        >
          <Translate
            tag="span"
            value="clientprops.okBtn"
          />
        </NavLink>
      </div>
    </div>
  </div>
  <ShowSolutionPrompt
    closePrompt={[Function]}
    onGiveUp={[Function]}
    showPrompt={false}
  />
</Modal>
`;

exports[`renders the SolutionFeedback component with the given up feedback 1`] = `
<Modal
  animationDuration={500}
  blockScroll={true}
  center={true}
  classNames={
    Object {
      "modal": "solutionFeedback incorrect",
      "overlay": "solutionFeedbackOverlay",
    }
  }
  classes={
    Object {
      "closeButton": "styles_closeButton__20ID4",
      "closeIcon": "styles_closeIcon__1QwbI",
      "modal": "styles_modal__gNwvD",
      "modalCenter": "styles_modalCenter__L9F2w",
      "overlay": "styles_overlay__CLSq-",
      "transitionEnter": "styles_transitionEnter__3j_-a",
      "transitionEnterActive": "styles_transitionEnterActive___eQs7",
      "transitionExit": "styles_transitionExit__1KmEf",
      "transitionExitActive": "styles_transitionExitActive__1nQXw",
    }
  }
  closeIconSize={28}
  closeIconSvgPath={
    <path
      d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
    />
  }
  closeOnEsc={false}
  closeOnOverlayClick={false}
  container={null}
  focusTrapOptions={Object {}}
  focusTrapped={true}
  onClose={[MockFunction]}
  onEntered={[MockFunction]}
  onModalExited={[MockFunction]}
  open={true}
  role="dialog"
  showCloseIcon={false}
  styles={Object {}}
>
  <div
    className="animatedBackground"
  />
  <div
    className="woman"
  />
  <div
    className="popupWrapper"
  >
    <div
      className="leftColumn givenUp"
    >
      <div
        className="popupTitle"
      >
        <Translate
          tag="span"
          value="clientprops.givenUpSolutionFeedbackTitle"
        />
      </div>
      <div
        className="scrollingArea"
      >
        <Scrollbar
          contentProps={Object {}}
          fallbackScrollbarWidth={20}
          maximalThumbYSize={83}
          minimalThumbSize={30}
          minimalThumbYSize={83}
          momentum={true}
          noDefaultStyles={true}
          scrollDetectionThreshold={100}
          scrollerProps={Object {}}
          thumbXProps={Object {}}
          thumbYProps={Object {}}
          trackClickBehavior="jump"
          trackXProps={Object {}}
          trackYProps={Object {}}
          wrapperProps={Object {}}
        >
          <div
            className="scrollWrapper"
          >
            <Translate
              className="feedbackText"
              dangerousHTML={true}
              tag="span"
              value="clientprops.clients.client1.givenUpSolutionFeedback"
            />
          </div>
        </Scrollbar>
      </div>
    </div>
    <div
      className="rightColumn"
    >
      <Translate
        attempts={1}
        className="solutionAttempts"
        dangerousHTML={true}
        tag="span"
        value="clientprops.solutionAttempts"
      />
      <div
        className="pointsWrapper"
      >
        <FeedbackPoints
          points={0}
          showTotalText={false}
        />
      </div>
      <Translate
        className="nextSteps"
        tag="span"
        value="clientprops.givenUpSolutionFeedbackNextSteps"
      />
      <div
        className="feedbackWrapper"
      >
        <NavLink
          className="feedbackBtn"
          onClick={[MockFunction]}
          to="/game/clientproposals/selector"
        >
          <Translate
            tag="span"
            value="clientprops.okBtn"
          />
        </NavLink>
      </div>
    </div>
  </div>
  <ShowSolutionPrompt
    closePrompt={[Function]}
    onGiveUp={[Function]}
    showPrompt={false}
  />
</Modal>
`;

exports[`renders the SolutionFeedback component with the incorrect feedback 1`] = `
<Modal
  animationDuration={500}
  blockScroll={true}
  center={true}
  classNames={
    Object {
      "modal": "solutionFeedback incorrect",
      "overlay": "solutionFeedbackOverlay",
    }
  }
  classes={
    Object {
      "closeButton": "styles_closeButton__20ID4",
      "closeIcon": "styles_closeIcon__1QwbI",
      "modal": "styles_modal__gNwvD",
      "modalCenter": "styles_modalCenter__L9F2w",
      "overlay": "styles_overlay__CLSq-",
      "transitionEnter": "styles_transitionEnter__3j_-a",
      "transitionEnterActive": "styles_transitionEnterActive___eQs7",
      "transitionExit": "styles_transitionExit__1KmEf",
      "transitionExitActive": "styles_transitionExitActive__1nQXw",
    }
  }
  closeIconSize={28}
  closeIconSvgPath={
    <path
      d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
    />
  }
  closeOnEsc={false}
  closeOnOverlayClick={false}
  container={null}
  focusTrapOptions={Object {}}
  focusTrapped={true}
  onClose={[MockFunction]}
  onEntered={[MockFunction]}
  onModalExited={[MockFunction]}
  open={true}
  role="dialog"
  showCloseIcon={false}
  styles={Object {}}
>
  <div
    className="animatedBackground"
  />
  <div
    className="woman"
  />
  <div
    className="popupWrapper"
  >
    <div
      className="leftColumn"
    >
      <div
        className="popupTitle"
      >
        <Translate
          tag="span"
          value="clientprops.incorrectSolutionFeedbackTitle"
        />
      </div>
      <Translate
        className="feedbackText"
        dangerousHTML={true}
        tag="span"
        value="clientprops.clients.client1.incorrectSolutionFeedback"
      />
      <div
        className="feedbackWrapper"
      >
        <button
          className="feedbackBtn"
          onClick={[MockFunction]}
          type="button"
        >
          <Translate
            tag="span"
            value="clientprops.retryBtn"
          />
        </button>
      </div>
      <button
        className="feedbackShowSolutionBtn"
        onClick={[Function]}
        type="button"
      >
        <Translate
          className="showTheSolutionText"
          tag="span"
          value="clientprops.showTheSolution"
        />
        <span
          className="arrowRight"
        />
      </button>
    </div>
    <button
      className="exitPopup"
      onClick={[MockFunction]}
      type="button"
    >
      <Translate
        tag="span"
        value="generic.popupCloseBtn"
      />
    </button>
  </div>
  <ShowSolutionPrompt
    closePrompt={[Function]}
    onGiveUp={[Function]}
    showPrompt={false}
  />
</Modal>
`;

exports[`renders the SolutionFeedback component without any feedback 1`] = `
<Modal
  animationDuration={500}
  blockScroll={true}
  center={true}
  classNames={
    Object {
      "modal": "solutionFeedback incorrect",
      "overlay": "solutionFeedbackOverlay",
    }
  }
  classes={
    Object {
      "closeButton": "styles_closeButton__20ID4",
      "closeIcon": "styles_closeIcon__1QwbI",
      "modal": "styles_modal__gNwvD",
      "modalCenter": "styles_modalCenter__L9F2w",
      "overlay": "styles_overlay__CLSq-",
      "transitionEnter": "styles_transitionEnter__3j_-a",
      "transitionEnterActive": "styles_transitionEnterActive___eQs7",
      "transitionExit": "styles_transitionExit__1KmEf",
      "transitionExitActive": "styles_transitionExitActive__1nQXw",
    }
  }
  closeIconSize={28}
  closeIconSvgPath={
    <path
      d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
    />
  }
  closeOnEsc={false}
  closeOnOverlayClick={false}
  container={null}
  focusTrapOptions={Object {}}
  focusTrapped={true}
  onClose={[MockFunction]}
  onEntered={[MockFunction]}
  onModalExited={[MockFunction]}
  open={false}
  role="dialog"
  showCloseIcon={false}
  styles={Object {}}
>
  <div
    className="animatedBackground"
  />
  <div
    className="woman"
  />
  <div
    className="popupWrapper"
  />
  <ShowSolutionPrompt
    closePrompt={[Function]}
    onGiveUp={[Function]}
    showPrompt={false}
  />
</Modal>
`;
